@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Dataset
@using ChartJs.Blazor.ChartJS.Common.Legends
@using Newtonsoft.Json
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util.Color

<h2>Stacked Bar Chart</h2>
<div class="row">
    <button class="btn btn-primary" onclick="@UpdateChart">Update Chart </button>
</div>
<ChartJsBarChart ref="barChart"
                 Config="@barChartConfig"
                 Width="600"
                 Height="300" />

<DataDisplayComponent OnUpdatedDataStr="@OnDataStrChange" bind-DataStr="@DataStr" Width="600" Height="300" />

@functions {

    private BarChartConfig barChartConfig { get; set; }
    ChartJsBarChart barChart { get; set; }

    string DataStr
    {
        get => JsonConvert.SerializeObject(barChartConfig.Data, Formatting.Indented);
        set
        {
            barChartConfig.Data = JsonConvert.DeserializeObject<BarChartData>(value);
            Console.WriteLine(JsonConvert.SerializeObject(barChartConfig.Data));
        }
    }


    void OnDataStrChange(string dataStr)
    {
        barChartConfig.Data = JsonConvert.DeserializeObject<BarChartData>(dataStr);
        barChart.Update();
    }

    protected override void OnInit()
    {
        barChartConfig = barChartConfig ?? new BarChartConfig
        {
            CanvasId = "myBarChartCanvas",
            Options = new BarChartOptions
            {
                Text = "Sample chart from Blazor",
                Display = true,
                Responsive = true,
                Legend = new Legend()
                {
                    Position = LegendPosition.RIGHT.ToString()
                },
            },
            Data = new BarChartData
            {
                Labels = new List<string> { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" },
                Datasets = new List<BaseBarChartDataset>
    {
                    new BarChartDataset
                    {
                        Label = "1'st dataset",
                        BackgroundColor = ColorUtil.RandomColorString(),
                        BorderColor = ColorUtil.RandomColorString(),
                        BorderWidth = 1,
                        Data = new List<dynamic> {9, 2, 5, 3, 3, 2}
                    },
                    new BarChartDataset
                    {
                        Label = "2'nd dataset",
                        BackgroundColor = ColorUtil.RandomColorString(),
                        BorderColor = ColorUtil.RandomColorString(),
                        Data = new List<dynamic> {30, 10, 15, 13, 13, 12}
                    }
                }
            }
        };
    }
    private void UpdateChart()
    {
        //Update existing dataset

        barChartConfig.Data.Labels.Add($"{DateTime.Now.Second}");
        barChartConfig.Data.Datasets.ForEach(dataset => { dataset.Data.Add(DateTime.Now.Second); });
    }

}