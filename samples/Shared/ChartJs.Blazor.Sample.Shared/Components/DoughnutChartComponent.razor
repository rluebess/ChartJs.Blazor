@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.DoughnutChart
@using Newtonsoft.Json
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util.Color

<h2>Doughnut Chart</h2>
<div class="row">
    <button class="btn btn-primary" onclick="@UpdateChart">Update Chart </button>
</div>
<ChartJsDoughnutChart ref="_doughnutChartJs" Config="@doughnutChartConfig" Width="600" Height="300" />

<DataDisplayComponent OnUpdatedDataStr="@OnDataStrChange" bind-DataStr="@DataStr" Width="600" Height="300" />

@functions{

    public DoughnutChartConfig doughnutChartConfig { get; set; }
    ChartJsDoughnutChart _doughnutChartJs;

    string DataStr
    {
        get => JsonConvert.SerializeObject(doughnutChartConfig.Data, Formatting.Indented);
        set
        {
            doughnutChartConfig.Data = JsonConvert.DeserializeObject<DoughnutData>(value);
            Console.WriteLine(JsonConvert.SerializeObject(doughnutChartConfig.Data));
        }
    }

    void OnDataStrChange(string dataStr)
    {
        doughnutChartConfig.Data = JsonConvert.DeserializeObject<DoughnutData>(dataStr);
        _doughnutChartJs.Update();
    }

    protected override void OnInit()
    {
        doughnutChartConfig = doughnutChartConfig ?? new DoughnutChartConfig
        {
            CanvasId = "myFirstDoughnutChart",
            Options = new DoughnutOptions
            {
                Text = "Sample chart from Blazor",
                Animation = new DoughnutAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                },
                Display = true,
                Responsive = true,
                Legend = new ChartJS.Common.Legends.Legend { Position = LegendPosition.RIGHT.ToString() }
            },
            Data = new DoughnutData
            {
                Labels = new List<string> { "A", "B", "C", "D" },
                Datasets = new List<DoughnutDataset>
            {
                    new DoughnutDataset
                    {
                        BackgroundColor = new[] {"#ff6384", "#55ee84", "#4463ff", "#efefef"},
                        Label = "Light Red",
                        Data = new List<int> {1, 2, 3, 4},
                        BorderWidth = 0,
                        HoverBackgroundColor = new[] {"#ff6384", "#55ee84", "#4463ff", "#efefef"},
                        HoverBorderColor = new[] {"#ff6384", "#55ee84", "#4463ff", "#efefef"},
                        HoverBorderWidth = new[] {1, 1, 1, 1},
                        BorderColor = new[] {"#ffffff", "#ffffff", "#ffffff", "#ffffff"}
                    }
                }
            }
        };
    }

    public void UpdateChart()
    {
        var rand = new Random();

        var colors = new[]
        {
            ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString()
        };
        var doughnutDataset = new DoughnutDataset
        {
            BackgroundColor = colors,
            Label = "Light Red",
            Data = new List<int> { rand.Next(10), rand.Next(10), rand.Next(10), rand.Next(10) },
            BorderWidth = 0,
            HoverBackgroundColor = colors,
            HoverBorderColor = colors,
            HoverBorderWidth = new[] { 1, 1, 1, 1 },
            BorderColor = new[] { "#ffffff", "#ffffff", "#ffffff", "#ffffff" },
        };

        doughnutChartConfig.Data.Datasets.Add(doughnutDataset);
    }

}