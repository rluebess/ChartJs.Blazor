@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.PolarAreaChart
@using Newtonsoft.Json
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util.Color

<h2>Bubble Chart</h2>
<div class="row">
    <button class="btn btn-primary" onclick="@UpdateChart">Update Chart </button>
</div>
<ChartJsPolarAreaChart ref="polarAreaChart" Config="@polarAreaChartConfig" Width="600" Height="300" />

<DataDisplayComponent OnUpdatedDataStr="@OnDataStrChange" bind-DataStr="@DataStr" Width="600" Height="300" />

@functions{

    public PolarAreaChartConfig polarAreaChartConfig { get; set; }
    ChartJsPolarAreaChart polarAreaChart;

    string DataStr
    {
        get => JsonConvert.SerializeObject(polarAreaChartConfig.Data, Formatting.Indented);
        set
        {
            polarAreaChartConfig.Data = JsonConvert.DeserializeObject<PolarAreaData>(value);
            Console.WriteLine(JsonConvert.SerializeObject(polarAreaChartConfig.Data));
        }
    }

    void OnDataStrChange(string dataStr)
    {
        polarAreaChartConfig.Data = JsonConvert.DeserializeObject<PolarAreaData>(dataStr);
        polarAreaChart.Update();
    }

    protected override void OnInit()
    {
        polarAreaChartConfig = polarAreaChartConfig ?? new PolarAreaChartConfig
        {
            CanvasId = "myFirstPolarAreaChart",
            Options = new PolarAreaOptions
            {
                Text = "Sample chart from Blazor",
                Display = true,
                Responsive = true,
                Title = new OptionsTitle { Display = true, Text = "I R TITLE" },
                Animation = new DoughnutAnimation { AnimateScale = true, AnimateRotate = true },
                Scale = new PolarAreaScale { Ticks = new Ticks { BeginAtZero = true } },
                Legend = new ChartJS.Common.Legends.Legend { Position = LegendPosition.TOP.ToString() }
            },
            Data = new PolarAreaData
            {
                Labels = new List<string> { "A", "B", "C", "D" },
                Datasets = new List<PolarAreaDataset>
            {
                    new PolarAreaDataset
                    {
                        BackgroundColor = new List<string> {ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString()},
                        HoverBackgroundColor = new List<string> {ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString()},
                        Data = new List<int> {7, 4, 9, 7},
                        BorderWidth = new List<int> {1, 1, 1, 1},
                        BorderColor = new List<string> {ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString()},
                        Label = "POLAR",
                        HoverBorderColor = new List<string> {ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString()}
                    }
                }
            }
        };
    }

    public void UpdateChart()
    {
        var rand = new Random();

        polarAreaChartConfig.Data.Labels.Add(DateTime.Now.Second.ToString());

        var ds1 = polarAreaChartConfig.Data.Datasets.First();
        ds1.Data.Add(rand.Next(10));
        ds1.BackgroundColor.Add(ColorUtil.RandomColorString());
        ds1.HoverBackgroundColor.Add(ColorUtil.RandomColorString());
        ds1.HoverBorderColor.Add(ColorUtil.RandomColorString());
        ds1.BorderWidth.Add(1);
        ds1.BackgroundColor.Add(ColorUtil.RandomColorString());
    }

}